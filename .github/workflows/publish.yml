name: Publish Releases

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'

jobs:
  publish-windows:
    name: Publish Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install ElectronNET.CLI
      run: |
        dotnet tool install ElectronNET.CLI -g
        echo "%USERPROFILE%\.dotnet\tools" >> $GITHUB_PATH

    - name: Update Version
      run: |
        $manifestPath = "Runtime/electron.manifest.json"
        $manifest = Get-Content $manifestPath -Raw | ConvertFrom-Json
        $manifest.build.buildVersion = "${{ github.event.inputs.version }}"
        $manifest | ConvertTo-Json -Depth 32 | Set-Content $manifestPath

    - name: Build and Package Runtime
      run: electronize build /PublishSingleFile false /target win -c ${{ env.CONFIGURATION }}
      working-directory: ./Runtime
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: ./Runtime/bin/Desktop

  publish-linux:
    name: Publish Linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install Linux Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxkbfile-dev

    - name: Install ElectronNET.CLI
      run: |
        dotnet tool install ElectronNET.CLI -g
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Update Version
      run: |
        manifestPath="Runtime/electron.manifest.json"
        manifest=$(cat $manifestPath)
        echo "$manifest" | jq --arg version "${{ github.event.inputs.version }}" '.build.buildVersion = $version' > $manifestPath

    - name: Build and Package Runtime
      run: electronize build /PublishSingleFile false /target linux -c ${{ env.CONFIGURATION }}
      working-directory: ./Runtime
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-artifacts
        path: ./Runtime/bin/Desktop

  publish-macos:
    name: Publish macOS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install ElectronNET.CLI
      run: |
        dotnet tool install ElectronNET.CLI -g
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Update Version
      run: |
        manifestPath="Runtime/electron.manifest.json"
        manifest=$(cat $manifestPath)
        echo "$manifest" | jq --arg version "${{ github.event.inputs.version }}" '.build.buildVersion = $version' > $manifestPath

    - name: Build and Package Runtime
      run: electronize build /PublishSingleFile false /target osx -c ${{ env.CONFIGURATION }}
      working-directory: ./Runtime
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-artifacts
        path: ./Runtime/bin/Desktop

  create-release:
    name: Create Release
    needs: [publish-windows, publish-linux, publish-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: false
