@using Quantum.Core.Models
@using Quantum.Infrastructure.Services
@using System.Text.RegularExpressions
@using System.Web
@inject RequestClient Client

<div class="course-introduction">
    @if (_loading)
    {
        <Spin Spinning="true" Tip="加载中...">
            <div style="min-height: 200px;"></div>
        </Spin>
    }
    else if (!string.IsNullOrEmpty(_error))
    {
        <Alert Message="@_error" Type="@AlertType.Error" ShowIcon="true" />
    }
    else
    {
        <div class="course-content">
            @((MarkupString)_htmlContent)
        </div>
    }
</div>

@code {
    [Parameter]
    public Course Course { get; set; } = null!;

    private string _htmlContent = string.Empty;
    private string _error = string.Empty;
    private bool _loading = true;

    private string GetIntroductionUrl() => $"http://zdbk.zju.edu.cn/jwglxt/xkjjsc/kcjjck_cxXkjjPage.html?xkjjid={Course.CourseCode}&htmlType=kcjj";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _loading = true;
            _error = string.Empty;
            _htmlContent = string.Empty;

            var response = await Client.GetAsync(GetIntroductionUrl());
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                
                // 从 input 标签中提取 HTML 内容
                var match = Regex.Match(content, @"<input[^>]*name=""xkjjHtml""[^>]*value=""([\s\S]*?)""", RegexOptions.Singleline);
                if (match.Success)
                {
                    // 解码 HTML 实体
                    _htmlContent = HttpUtility.HtmlDecode(match.Groups[1].Value);
                }
                else
                {
                    _error = "无法找到课程介绍内容";
                }
            }
            else
            {
                _error = $"获取课程介绍失败：HTTP {(int)response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            _error = $"获取课程介绍时发生错误：{ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }
}

<style>
    .course-introduction {
        width: 100%;
        height: 100%;
        min-height: 500px;
        position: relative;
        padding: 16px;
    }

    .course-content {
        width: 100%;
        height: 100%;
        min-height: 500px;
        border: none;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: auto;
        padding: 20px;
        font-family: SimSun;
    }

    .course-content :deep(table) {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1em;
    }

    .course-content :deep(td), .course-content :deep(th) {
        border: 1px solid #000;
        padding: 8px;
    }

    .course-content :deep(tr:nth-child(even)) {
        background-color: #f9f9f9;
    }

    .course-content :deep(th) {
        background-color: #f5f5f5;
        font-weight: bold;
    }

    .course-content :deep(p) {
        margin: 8px 0;
        line-height: 1.5;
    }
</style>
