@inherits LayoutComponentBase
@using Quantum.Core.Repository
@using Quantum.Infrastructure.States
@using Microsoft.EntityFrameworkCore
@using Quantum.Infrastructure.Services
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject QuantumDbContext Context
@inject IMessageService Message
@inject RequestClient Client
@implements IDisposable

<Layout Style="min-height: 100vh;">
    <Header Style="padding: 0 0;height: 30px;">
        <TitleBar/>
    </Header>
    <Layout>
        <Sider Collapsible
               Collapsed="@_collapsed"
               OnCollapse="@(collapsed => _collapsed = collapsed)"
               Width="220"
               CollapsedWidth="90"
               Style="background: linear-gradient(180deg, #7b1fa2 0%, #9c27b0 100%);">
            <NavMenu Collapsed="@_collapsed"/>
        </Sider>
        <Layout Style="min-height: 0;">
            <Header Style="background:white;padding:0 24px;height:48px;line-height:48px;border-bottom:1px solid #f0f0f0">
                <div class="user-info">
                    @if (UserState.IsLoggedIn)
                    {
                        <span class="user-name">@UserState.CurrentUser?.Name (@UserState.CurrentUser?.Id)</span>
                        <Button Type="@ButtonType.Link" Danger Size="@ButtonSize.Small" OnClick="@(async () => await HandleLogout())">
                            退出登录
                        </Button>
                    }
                    else
                    {
                        <span>未登录</span>
                    }
                    <Popconfirm Placement="Placement.Bottom" Title=@("这将清空所有数据，确定要继续吗？") OnConfirm="HandleClearCache">
                        <Button Size="@ButtonSize.Small">清除缓存</Button>
                    </Popconfirm>
                </div>
            </Header>
            <Content Style="padding: 0; overflow: auto;">@Body</Content>
        </Layout>
    </Layout>
</Layout>

<style>
    .user-info {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        gap: 8px;
        height: 100%;
        font-size: 13px;
    }

    .user-name {
        color: #595959;
    }
</style>

@code {
    private bool _collapsed;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserState.OnUserStateChanged += StateHasChanged;
    }

    private async Task ClearAllDataAsync()
    {
        // 获取所有表名
        var tableNames = Context.Model.GetEntityTypes()
            .Select(t => t.GetTableName())
            .Where(n => n != null)
            .ToList();

        // 禁用外键约束
        await Context.Database.ExecuteSqlRawAsync("PRAGMA foreign_keys = OFF;");

        try
        {
            // 清空所有表
            foreach (var tableName in tableNames)
            {
                await Context.Database.ExecuteSqlRawAsync($"DELETE FROM {tableName};");
            }
        }
        finally
        {
            // 重新启用外键约束
            await Context.Database.ExecuteSqlRawAsync("PRAGMA foreign_keys = ON;");
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            UserState.Logout();
            await Client.ClearAllCookiesAsync();
            await Context.ResetStateAsync();
            await Message.Success("已退出登录");
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await Message.Error($"退出登录时发生错误：{ex.Message}");
        }
    }

    private async Task HandleClearCache()
    {
        try
        {
            await ClearAllDataAsync();
            await HandleLogout();  // 清除后自动退出登录
            await Message.Success("清除成功");
        }
        catch (Exception ex)
        {
            await Message.Error($"清除失败: {ex.Message}");
        }
    }

    public void Dispose()
    {
        UserState.OnUserStateChanged -= StateHasChanged;
    }
}
