@page "/"
@using Quantum.Infrastructure.States
@using Quantum.Core.Interfaces
@using Quantum.Infrastructure.Services
@using Quantum.UI.Components.Shared
@inject IMessageService Message
@inject UserState UserState
@inject RequestClient Client
@inject IAuthenticateService AuthenticateService
@inject ICourseScrapingService ScrapingService
@inject ILogger<Home> Logger

@implements IDisposable

<PageTitle>首页 - Quantum 选课助手</PageTitle>

@if (!UserState.IsLoggedIn)
{
    <div class="login-container">
        <div class="login-box">
            <div class="login-header">
                <h1>欢迎使用 Quantum 选课助手</h1>
            </div>
            <div class="login-form">
                <div class="form-group">
                    <AntDesign.Input Placeholder="职工号/学号/手机号码/邮箱/别名" Size="@InputSize.Large" @bind-Value="@_loginId">
                        <Prefix>
                            <Icon Type="user" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </div>
                <div class="form-group">
                    <AntDesign.Input Type="InputType.Password" Placeholder="密码" Size="@InputSize.Large" @bind-Value="@_password">
                        <Prefix>
                            <Icon Type="lock" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </div>
                <AntDesign.Button Type="@ButtonType.Primary" Block Size="@ButtonSize.Large" AutoLoading OnClick="@HandleLoginAsync">
                    统一身份认证登录
                </AntDesign.Button>
            </div>
        </div>
    </div>
}
else
{
    <div class="overview">
        <PageHeader Title="选课状态概览" 
                   Style="padding: 16px 0"
                   >
        </PageHeader>

        @if (_loading)
        {
            <div class="loading-container">
                <Spin Size="SpinSize.Large" Tip="加载中..." />
            </div>
        }
        else
        {
            <AntDesign.Row Gutter="16" Style="margin-bottom: 24px">
                <AntDesign.Col Span="12">
                    <Card Bordered>
                        <Statistic Title="已选课程" 
                                  Value="@_selectedCourseCount" 
                                  Suffix="门"
                                  ValueStyle="color: #3f8600" />
                    </Card>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Card Bordered>
                        <Statistic Title="已选学分" 
                                  Value="@_totalCredits" 
                                  Precision="1" 
                                  Suffix="分"
                                  ValueStyle="color: #cf1322" />
                    </Card>
                </AntDesign.Col>
            </AntDesign.Row>

            <Card Title="已选课程" Bordered>
                <TimeTable Sections="@UserState.ChosenCourseSections" />
            </Card>
        }
    </div>
}

<style>
    .login-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: calc(100vh - 140px);
        background: #f5f5f5;
        padding: 24px;
    }

    .login-box {
        background: white;
        padding: 32px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        width: 100%;
        max-width: 400px;
    }

    .login-header {
        text-align: center;
        margin-bottom: 32px;
    }

    .logo {
        width: 64px;
        height: 64px;
        margin-bottom: 16px;
    }

    .login-header h1 {
        font-size: 24px;
        color: #1f1f1f;
        margin-bottom: 8px;
    }

    .subtitle {
        color: #8c8c8c;
        font-size: 14px;
    }

    .login-form {
        width: 100%;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .overview {
        padding: 24px;
        background: white;
    }

    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 400px;
    }
</style>

@code {
    private string _loginId = string.Empty;
    private string _password = string.Empty;
    private decimal _totalCredits;
    private int _selectedCourseCount;
    private bool _loading;

    protected override void OnInitialized()
    {
        UserState.OnUserStateChanged += OnUserStateChanged;
        if (UserState.IsLoggedIn)
        {
            _ = LoadChosenCoursesAsync();
        }
    }

    private void OnUserStateChanged()
    {
        if (UserState.IsLoggedIn)
        {
            _ = LoadChosenCoursesAsync();
        }
        else
        {
            _totalCredits = 0;
            _selectedCourseCount = 0;
        }
        StateHasChanged();
    }

    private async Task HandleLoginAsync()
    {
        if (string.IsNullOrWhiteSpace(_loginId) || string.IsNullOrWhiteSpace(_password))
        {
            await Message.Error("请输入用户名和密码");
            return;
        }

        try
        {
            var user = await AuthenticateService.LoginAsync(_loginId, _password);
            UserState.Login(user);
            await Client.SaveToDatabaseAsync();
            await Message.Success($"登录成功，欢迎 {UserState.CurrentUser?.Name}");
            Logger.LogInformation("登录成功");
        }
        catch (Exception ex)
        {
            await Message.Error(ex.Message);
            Logger.LogError(ex, "登录失败");
        }
    }

    private async Task LoadChosenCoursesAsync()
    {
        try
        {
            _loading = true;
            var courses = await ScrapingService.GetChosenCourseSectionsAsync();
            UserState.ChosenCourseSections = courses;
            _selectedCourseCount = courses.Count;
            _totalCredits = courses.Sum(c => c.Course.Credits);
        }
        catch (Exception ex)
        {
            await Message.Error(ex.Message);
            Logger.LogError(ex, "Failed to load chosen courses");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        UserState.OnUserStateChanged -= OnUserStateChanged;
    }
}
