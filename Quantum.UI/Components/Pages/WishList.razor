@page "/wishlist"
@using Quantum.Core.Models
@using Quantum.Infrastructure.States
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using System.Reflection
@using Quantum.UI.Components.Shared
@using BlazorMonaco.Editor
@inject WishListState WishListState
@inject UserState UserState
@inject IMessageService Message

<PageTitle>愿望单 - Quantum 选课助手</PageTitle>

<Card>
    <Tabs>
        <TabPane Key="1" Tab=@("愿望单列表")>
            @if (WishListState.WishList.Count == 0)
            {
                <Empty Description=@("您的愿望单是空的") />
            }
            else
            {
                <WishListTable />
            }
        </TabPane>
        <TabPane Key="2" Tab=@("优化算法")>
            <AntDesign.Form Layout="FormLayout.Vertical" Model="_">
                <FormItem Label=@("算法代码")>
                    <div class="editor-container">
                        <StandaloneCodeEditor @ref="_editor" ConstructionOptions="EditorConstructionOptions" />
                    </div>
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" OnClick="RunOptimization">
                        运行优化
                    </Button>
                    <Button OnClick="ResetCode" Style="margin-left: 8px;">
                        重置代码
                    </Button>
                </FormItem>
            </AntDesign.Form>
        </TabPane>
        <TabPane Key="3" Tab="优化结果">
            <Table DataSource="@WishListState.OptimizedSchedule" Size="@TableSize.Small" Bordered>
                <PropertyColumn Title="课程" Property="c => c.Course.Name" />
                <PropertyColumn Title="教师" Property="c => c.InstructorName" />
                @*<PropertyColumn Title="教师评价" Property="c => c.InstructorRating" />*@
                <PropertyColumn Title="学分" Property="c => c.Course.Credits" />
                <PropertyColumn Title="学期" Property="c => c.Semester" />
                <PropertyColumn Title="上课时间" Property="c => c.Schedule" />
                <PropertyColumn Title="上课地点" Property="c => c.Location" />
                <PropertyColumn Title="考试时间" Property="c => c.ExamTime" />
                <PropertyColumn Title="授课方式" Property="c => c.TeachingForm" />
                <Column Title="选中概率" TData="CourseSection">
                    @((int)(context.SelectionProbability * 100))%
                </Column>
            </Table>
        </TabPane>
    </Tabs>
</Card>

@code {
    private readonly object _ = new();

    // ReSharper disable once UseRawString
    const string SampleCode = @"using System;
using System.Collections.Generic;
using System.Linq;
using Quantum.Core.Models;

public class Optimizer
{
    public static List<CourseSection> OptimizeSchedule(List<CourseSection> wishList, List<CourseSection>? chosenSections)
    {
        // 这里写你的算法
        // 你可以使用 wishList 和 chosenSections 来获取愿望单和已选课程
        // 相关的数据结构和方法可以在 Quantum.Core.Models.Course 中找到
        // 下面是一个简单的示范
        Dfs(0, wishList, chosenSections);
        return Answer;
    }
    
    public static List<CourseSection> Answer = [];
    public static List<CourseSection> CurrentAnswer = [];

    public static void Dfs(int depth, List<CourseSection> wishList, List<CourseSection>? chosenSections){
        if(depth == wishList.Count){
            if(CurrentAnswer.Sum(s=>s.Course.Credits) > Answer.Sum(s=>s.Course.Credits)){ // LINQ，很神奇吧
                Answer = new(CurrentAnswer); // 注意，在 C# 中，对象都是以引用形式存在的，赋值也是
            }
            return;
        }
        if(NoConflict(wishList[depth], CurrentAnswer, chosenSections)){
            CurrentAnswer.Add(wishList[depth]);
            Dfs(depth + 1, wishList, chosenSections);
            CurrentAnswer.Remove(wishList[depth]);
        }
        Dfs(depth + 1, wishList, chosenSections);
    }

    public static bool NoConflict(CourseSection section, List<CourseSection> currentAnswer, List<CourseSection>? chosenSections){
        if(currentAnswer.Any(s=>s.Course.CourseCode == section.Course.CourseCode)
            || (chosenSections != null && chosenSections.Any(s=>s.Course.CourseCode == section.Course.CourseCode)))
        {
            return false; // 课程冲突
        }

        // 你可以直接使用代码中已经封装好的功能
        // 就像你的代码是一个真正的编译单元一样！

        return !(
                (chosenSections != null && chosenSections.Any(s => s.IsConflictWith(section))) ||  // 注释这一行，则不考虑与已选课程的冲突情况
                currentAnswer.Any(s => s.IsConflictWith(section)));
    }
}";

    private StandaloneCodeEditor _editor = new();

    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "csharp",
            Value = SampleCode,
            AutomaticLayout = true,
            ScrollBeyondLastLine = false,
            Dimension = new Dimension
            {
                Height = 400
            }
        };
    }

    private async Task RunOptimization()
    {
        try
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(await _editor.GetValue());
            var assemblyName = Path.GetRandomFileName();
            var references = new MetadataReference[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(List<>).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Course).Assembly.Location),
                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName("System.Runtime")).Location),
                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName("System.Collections")).Location),
                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName("System.Linq")).Location),
                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName("netstandard")).Location)
            };

            var compilation = CSharpCompilation.Create(
                assemblyName,
                syntaxTrees: new[] { syntaxTree },
                references: references,
                options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            using var ms = new MemoryStream();
            var result = compilation.Emit(ms);

            if (!result.Success)
            {
                var failures = result.Diagnostics
                    .Where(diagnostic => diagnostic.IsWarningAsError || diagnostic.Severity == DiagnosticSeverity.Error);

                var errorMessage = string.Join("\n", failures.Select(f => f.GetMessage()));
                await Message.Error("编译错误：\n" + errorMessage);
                return;
            }

            ms.Seek(0, SeekOrigin.Begin);
            var assembly = Assembly.Load(ms.ToArray());
            var type = assembly.GetType("Optimizer");
            var method = type?.GetMethod("OptimizeSchedule");

            if (method == null)
            {
                await Message.Error("找不到 OptimizeSchedule 方法");
                return;
            }

            var optimizedSections = (List<CourseSection>?)method.Invoke(
                null,
                [WishListState.WishList,UserState.ChosenCourseSections]);

            if (optimizedSections is null) throw new InvalidOperationException("优化算法返回了 null");

            WishListState.OptimizedSchedule = optimizedSections;
            await Message.Success("优化完成！");
        }
        catch (Exception ex)
        {
            await Message.Error("运行错误：" + ex.Message);
        }
    }

    private async void ResetCode()
    {
        await _editor.SetValue(SampleCode);
    }
}
