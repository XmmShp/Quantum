@page "/csa/courses"
@namespace Quantum.UI.CourseSelectionAssistant.Pages
@using Quantum.UI.CourseSelectionAssistant.Components
@using zdbk.zju.edu.cn.Models
@using zdbk.zju.edu.cn
@using zdbk.zju.edu.cn.Constants
@using zdbk.zju.edu.cn.Enums
@inherits zjuam.zju.edu.cn.ZjuamAuthenticatedComponent
@inject IZdbkService ZdbkService
@inject IMessageService Message
<style>
    /* 页面容器 */
    .page-container {
        padding: 24px;
        background: white;
    }

    /* 搜索面板 */
    .search-panel {
        background: #fafafa;
        padding: 24px;
        border-radius: 8px;
        margin-bottom: 24px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    }

    /* 分类按钮 */
    .category-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 24px;
    }

    /* 自定义按钮样式 */
    .button-custom {
        border-radius: 6px !important;
        padding: 4px 16px !important;
        border: 1px solid #e8e8e8 !important;
        background-color: white !important;
        color: #595959 !important;
        transition: all 0.3s !important;
    }

    .button-custom:hover {
        color: #1890ff !important;
        border-color: #1890ff !important;
        background-color: #e6f7ff !important;
    }

    /* 加载状态 */
    .loading-container {
        padding: 48px 0;
        text-align: center;
    }

    .button-custom {
    border-radius: 8px !important;
    padding: 3px 24px !important;
    border: 2px solid #dcdcdc !important; /* 浅灰色边框 */
    background-color: white !important; /* 设置按钮背景颜色为白色 */
    color: #333 !important; /* 设置文本颜色，确保在白色背景上清晰可见 */
    }
    .category-section {
        margin-bottom: 16px;
    }
    .category-title {
        font-weight: bold;
        margin-bottom: 8px;
    }
    /* 添加悬浮侧边栏样式 */
    .floating-sidebar {
        position: fixed;
        top: 0;
        right: -400px; /* 初始状态在屏幕右侧外 */
        width: 400px;
        height: 100vh;
        background-color: white;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease-in-out;
        z-index: 1000;
        padding: 20px;
        overflow-y: auto;
    }

    .course-list-container {
        position: relative;
        min-height: 100vh;
    }

    .course-list-container:hover .floating-sidebar {
        right: 0; /* 鼠标悬浮时滑入 */
    }
</style>

<PageTitle>课程列表 - Quantum 选课助手</PageTitle>

<div class="page-container">
    @* 实现search功能 *@
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <Title Level="2" style="margin: 0;">课程列表</Title>
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="@(() => { _wishListVisible = true; })">
                    <Icon Type="heart" Theme="IconThemeType.Outline" /> 愿望单
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Link" OnClick="ToggleSearchPanel">
                    <Icon Type="@(_showSearchPanel ? "up" : "down")" Theme="IconThemeType.Outline" />
                    @(_showSearchPanel ? "收起筛选" : "展开筛选")
                </Button>
            </SpaceItem>
        </Space>
    </div>

    

    @if (_showSearchPanel)
    {
        @*
        <div class="search-panel">
            <Row Gutter="16">

                <AntDesign.Col Span="6">
                    <AntDesign.Input Placeholder="课程代码" @bind-Value="_searchFilters.CourseCode">
                        <Prefix>
                            <Icon Type="number" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </AntDesign.Col>

                <AntDesign.Col Span="6">
                    <AntDesign.Input Placeholder="课程名称" @bind-Value="_searchFilters.CourseName">
                        <Prefix>
                            <Icon Type="book" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </AntDesign.Col>

                <AntDesign.Col Span="6">
                    <AntDesign.Input Placeholder="课程类别" @bind-Value="_searchFilters.Category">
                        <Prefix>
                            <Icon Type="tag" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16" Style="margin-top: 16px;">
                <AntDesign.Col Span="6">
                    <AntDesign.Input Placeholder="开课学院" @bind-Value="_searchFilters.Department">
                        <Prefix>
                            <Icon Type="bank" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </AntDesign.Col>

                <AntDesign.Col Span="6">
                    <AntDesign.Input Placeholder="教师" @bind-Value="_searchFilters.Instructor">
                        <Prefix>
                            <Icon Type="user" Theme="IconThemeType.Outline" />
                        </Prefix>
                    </AntDesign.Input>
                </AntDesign.Col>

                <AntDesign.Col Span="12">
                    <Space>
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary" OnClick="ApplySearch">
                                <Icon Type="search" Theme="IconThemeType.Outline" /> 搜索
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button OnClick="ClearSearch">
                                <Icon Type="clear" Theme="IconThemeType.Outline" /> 清空
                            </Button>
                        </SpaceItem>
                    </Space>
                </AntDesign.Col>
            </Row>
        </div>
        *@
    }

    <Divider />

    <div class="category-buttons">
        <Button @onclick="() => FetchCourse(CourseCategory.MyCategory)" Shape="ButtonShape.Round">本专业课程</Button>

        <AntDesign.Dropdown Placement="Placement.Bottom">
            <Overlay>
                <Menu>
                    @foreach (var category in CourseCategories.CompulsoryCourses)
                    {
                        <MenuItem>
                            <Button @onclick="() => FetchCourse(category.Id)" class="button-custom">@category.Name</Button>
                        </MenuItem>
                    }
                </Menu>
            </Overlay>
            <ChildContent>
                <Button Shape="ButtonShape.Round">通识必修课</Button>
            </ChildContent>
        </AntDesign.Dropdown>

        <AntDesign.Dropdown Placement="Placement.Bottom">
            <Overlay>
                <Menu>
                    @foreach (var category in CourseCategories.ElectiveCourses)
                    {
                        <MenuItem>
                            <Button @onclick="() => FetchCourse(category.Id)" class="button-custom">@category.Name</Button>
                        </MenuItem>
                    }
                </Menu>
            </Overlay>
            <ChildContent>
                <Button Shape="ButtonShape.Round">通识选修课</Button>
            </ChildContent>
        </AntDesign.Dropdown>

        <Button @onclick="() => FetchCourse(CourseCategory.PhysicalEdu)" Shape="ButtonShape.Round">体育课</Button>
        <Button @onclick="() => FetchCourse(CourseCategory.MajorFundation)" Shape="ButtonShape.Round">专业基础课程</Button>

        <AntDesign.Dropdown Placement="Placement.Bottom">
            <Overlay>
                <Menu>
                    @foreach (var category in CourseCategories.MajorCourses)
                    {
                        <MenuItem>
                            <Button @onclick="() => FetchCourse(category.Id)" class="button-custom">@category.Name</Button>
                        </MenuItem>
                    }
                </Menu>
            </Overlay>
            <ChildContent>
                <Button Shape="ButtonShape.Round">专业课程</Button>
            </ChildContent>
        </AntDesign.Dropdown>

        <AntDesign.Dropdown Placement="Placement.Bottom">
            <Overlay>
                <Menu>
                    @foreach (var category in CourseCategories.AccreditedCourses)
                    {
                        <MenuItem>
                            <Button @onclick="() => FetchCourse(category.Id)" class="button-custom">@category.Name</Button>
                        </MenuItem>
                    }
                </Menu>
            </Overlay>
            <ChildContent>
                <Button Shape="ButtonShape.Round">认定型课程</Button>
            </ChildContent>
        </AntDesign.Dropdown>

        @foreach (var category in CourseCategories.SpecialCourses)
        {
            <Button @onclick="() => FetchCourse(category.Id)" Shape="ButtonShape.Round">@category.Name</Button>
        }
    </div>

    <Spin Spinning="@_isLoadingCourses">
        <div>
            @if (_courses.Any())
            {
                <div>
                    <GridRow>
                        <GridCol Span="24">
                            <Collapse Accordion>
                                @foreach (var course in _courses)
                                {
                                    @* 在这里进行第二步请求 ：课程的具体section*@
                                    <Panel Key="@course.Id"
                                           HeaderTemplate="@GetHeader(course)"
                                           OnActiveChange="isActive => OnPanelActiveChange(isActive,course)">
                                        @if (_loadingCourseSection)
                                        {
                                            <Spin Tip="加载中 ..." />
                                        }
                                        else if (_sectionCourse?.Equals(course) ?? false)
                                        {
                                            <SelectableSectionTable Sections="course.Sections" ShowActions="true"/>
                                        }
                                    </Panel> 
                                }
                            </Collapse>
                        </GridCol>
                    </GridRow>
                    @if (_hasMoreData || _currentPage > 1)
                    {
                        <GridRow Style="margin-top: 16px;">
                            <GridCol Span="24" Style="display: flex; justify-content: center;">
                                <Pagination 
                                    Total="@(_currentPage * PageSize + (_hasMoreData ? PageSize : 0))"
                                    PageSize="@PageSize"
                                    Current="_currentPage"
                                    OnChange="OnPageChange"
                                    HideOnSinglePage="true" 
                                    ShowSizeChanger="false"/>
                            </GridCol>
                        </GridRow>
                    }
                </div>
            }
        </div>
    </Spin>
</div>

@* 添加Modal组件 *@
<Modal Title="@($"课程介绍 - {_selectedCourse?.Name ?? ""}")"
       Visible="@_introductionVisible"
       OnCancel="@(() => { _introductionVisible = false; _selectedCourse = null; })"
       Width="1000"
       Footer="null">
    @if (_selectedCourse != null)
    {
        @if (_loadingCourseIntroduction)
        {
            <Spin Tip="加载中 ..."/>
        }
        else
        {
            @((MarkupString)_selectedCourse.Introduction)
        }
    }
</Modal>

<Drawer Visible="@_wishListVisible"
        Closable="true"
        OnClose="@(() => _wishListVisible = false)"
        Width="800"
        Title=@("愿望单")>
    <WishListTable />
</Drawer>

@* ReSharper disable once InconsistentNaming *@
@code {
    private bool _isLoadingCourses;
    private bool _loadingCourseIntroduction;
    private bool _showSearchPanel;
    private HashSet<SelectableCourse> _courses = [];
    private bool _introductionVisible;
    private bool _wishListVisible;
    private SelectableCourse? _selectedCourse;
    private SelectableCourse? _sectionCourse;

    // 分页相关变量
    private const int PageSize = 20;
    private int _currentPage = 1;
    private bool _hasMoreData = true;
    private int Begin => (_currentPage - 1) * PageSize + 1;
    private int End => _currentPage * PageSize;

    protected override async Task OnInitializedAsync()
    {
        await FetchCourse(CourseCategory.MyCategory);
    }

    private async Task FetchCourse(CourseCategory category)
    {
        _isLoadingCourses = true;
        _lastFetchType = category;
        StateHasChanged();

        var fetchedCoursesResult = await ZdbkService.GetAvailableCoursesAsync(category, Begin,End);
        if (fetchedCoursesResult.IsSuccess)
        {
            _courses = fetchedCoursesResult.Value!;
            _hasMoreData = _courses.Count >= PageSize;
        }
        else
        {
            await Message.Error("获取课程列表失败.");
        }

        _isLoadingCourses = false;
        StateHasChanged();
    }

    private async Task OnPageChange(PaginationEventArgs args)
    {
        if (args.Page != _currentPage && (args.Page < _currentPage || _hasMoreData))
        {
            _currentPage = args.Page;
            await FetchCourse(_lastFetchType);
        }
    }

    private CourseCategory _lastFetchType = CourseCategory.MyCategory;
    private bool _loadingCourseSection;

    private void OnPanelActiveChange(bool isActive,SelectableCourse course)
    {
        if (!isActive)
        {
            _sectionCourse = null;
            return;
        }
        _sectionCourse = course;
        _loadingCourseSection = course.Sections.Count == 0;
        _ = ZdbkService.UpdateSectionsAsync(course).ContinueWith(_ =>
        {
            _loadingCourseSection = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ToggleSearchPanel()
    {
        _showSearchPanel = !_showSearchPanel;
    }

    private RenderFragment<SelectableCourse> GetHeader => course => __builder =>
    {
        <div>
            <GridRow>
                <GridCol Span="4">
                    <AntDesign.Text Strong>
                        @course.Id
                    </AntDesign.Text>
                </GridCol>
                <GridCol Span="4">
                    @course.Name
                </GridCol>
                <GridCol Span="6">
                    <AntDesign.Tag Color=@("Cyan")>
                        @course.Department
                    </AntDesign.Tag>
                </GridCol>
                <GridCol Span="2">
                    @course.Credits
                </GridCol>
                <GridCol Span="4">
                    <AntDesign.Tag Color="@GetStatusColor(course.Status)">
                        @GetStatusString(course.Status)
                    </AntDesign.Tag>
                </GridCol>
                <GridCol Span="2">
                    <Button Type="@ButtonType.Link" 
                            OnClick="() => ShowCourseIntroduction(course)"
                            OnClickStopPropagation="true"
                            Size="ButtonSize.Small">
                        <Icon Type="info-circle" Theme="IconThemeType.Outline" /> 课程介绍
                    </Button>
                </GridCol>
            </GridRow>
        </div>
    };

    private static string GetStatusString(CourseStatus result) => result switch
    {
        CourseStatus.NotSelected => "未选",
        CourseStatus.Failed => "未通过",
        CourseStatus.Passed => "已通过",
        CourseStatus.Selected => "已选",
        _ => "未知"
    };

    private static string GetStatusColor(CourseStatus result) => result switch
    {
        CourseStatus.NotSelected => "warning",
        CourseStatus.Failed => "error",
        CourseStatus.Passed => "success",
        CourseStatus.Selected => "processing",
        _ => "default"
    };

    private void ShowCourseIntroduction(SelectableCourse selectableCourse)
    {
        _selectedCourse = selectableCourse;
        _loadingCourseIntroduction = string.IsNullOrEmpty(_selectedCourse.Introduction);
        _ = ZdbkService.UpdateIntroductionAsync(_selectedCourse).ContinueWith(_ =>
        {
            _loadingCourseIntroduction = false;
            InvokeAsync(StateHasChanged);
        });
        _introductionVisible = true;
    }
}
