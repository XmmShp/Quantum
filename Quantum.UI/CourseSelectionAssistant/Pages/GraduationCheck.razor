@page "/csa/graduation"
@namespace Quantum.UI.CourseSelectionAssistant.Pages
@using Quantum.UI.CourseSelectionAssistant.Components
@using zdbk.zju.edu.cn
@using zdbk.zju.edu.cn.Enums
@using zdbk.zju.edu.cn.Models
@inherits zjuam.zju.edu.cn.ZjuamAuthenticatedComponent
@inject IZdbkService ZdbkService

<style>
    /* 主卡片样式 */
    .main-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }

    /* 分页器样式 */
    .pagination-container {
        margin-top: 16px;
        padding-top: 16px;
        text-align: right;
        border-top: 1px solid #f0f0f0;
    }

    /* 页面头部容器 */
    .page-header-container {
        background: white;
        padding: 16px 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .page-title {
        font-size: 24px;
        font-weight: 500;
        margin: 0;
    }
</style>

<div class="page-header-container">
    <h1 class="page-title">毕业资格自审</h1>
    <Space>
        <SpaceItem>
            <Switch Checked="@_showOnlyUnfinished"
                    CheckedChildren="仅显示未完成"
                    UnCheckedChildren="显示全部"
                    OnChange="@OnFilterChange"/>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="@(() => { _wishListVisible = true; })">
                <Icon Type="heart" Theme="IconThemeType.Outline"/> 愿望单
            </Button>
        </SpaceItem>
    </Space>
</div>

<Spin Spinning="!ZdbkService.GraduationRequirement.IsInitialized" Tip="加载中...">
    <Card Class="main-card">
        <Collapse Accordion>
            @foreach (var course in PagedCourses)
            {
                <Panel Key="@(course.Id)"
                       HeaderTemplate="GetPanelHeader(course)"
                       OnActiveChange="isActive => OnPanelActiveChange(isActive,course)">
                    @if (_loadingCourseSection)
                    {
                        <Spin Tip="加载中 ..." />
                    }
                    else if (_sectionCourse?.Equals(course) ?? false)
                    {
                        <SelectableSectionTable Sections="course.Sections" ShowActions="true"/>
                    }
                </Panel>
            }
        </Collapse>
        <div class="pagination-container">
            <Pagination Total="@FilteredCourses.Count()"
                        PageSize="@_pageSize"
                        Current="@_currentPage"
                        OnChange="@HandlePageChange"
                        ShowSizeChanger="true"
                        ShowQuickJumper="true">
            </Pagination>
        </div>
    </Card>
</Spin>

@* 添加Modal组件 *@
<Modal Title="@($"课程介绍 - {_selectedCourse?.Name ?? ""}")"
       Visible="@_introductionVisible"
       OnCancel="@(() => { _introductionVisible = false; _selectedCourse = null; })"
       Width="1000"
       Footer="null">
    @if (_selectedCourse != null)
    {
        @if (_loadingCourseIntroduction)
        {
            <Spin Tip="加载中 ..." />
        }
        else
        {
            @((MarkupString)_selectedCourse.Introduction)
        }
    }
</Modal>

<Drawer Visible="@_wishListVisible"
        Closable="true"
        OnClose="@(() => _wishListVisible = false)"
        Width="800"
        Title=@("愿望单")>
    <WishListTable/>
</Drawer>

@* ReSharper disable once InconsistentNaming *@
@code {
    private bool _showOnlyUnfinished;
    private bool _wishListVisible;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private SelectableCourse? _sectionCourse;
    private HashSet<SelectableCourse> Courses { get; set; } = [];

    private void OnPanelActiveChange(bool isActive,SelectableCourse course)
    {
        if (!isActive)
        {
            _sectionCourse = null;
            return;
        }
        _sectionCourse = course;
        _loadingCourseSection = course.Sections.Count == 0;
        _ = ZdbkService.UpdateSectionsAsync(course).ContinueWith(_ =>
        {
            _loadingCourseSection = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private IEnumerable<SelectableCourse> FilteredCourses => _showOnlyUnfinished
        ? Courses.Where(c => c.Status is CourseStatus.NotSelected or CourseStatus.Failed)
        : Courses;

    private IEnumerable<SelectableCourse> PagedCourses => FilteredCourses
        .Skip((_currentPage - 1) * _pageSize)
        .Take(_pageSize);

    private static string GetStatusString(CourseStatus result) => result switch
    {
        CourseStatus.NotSelected => "未选",
        CourseStatus.Failed => "未通过",
        CourseStatus.Passed => "已通过",
        CourseStatus.Selected => "进行中",
        _ => "未知"
    };

    private static string GetStatusColor(CourseStatus result) => result switch
    {
        CourseStatus.NotSelected => "warning",
        CourseStatus.Failed => "error",
        CourseStatus.Passed => "success",
        CourseStatus.Selected => "processing",
        _ => "default"
    };

    private SelectableCourse? _selectedCourse;
    private bool _introductionVisible;
    private bool _loadingCourseIntroduction;
    private bool _loadingCourseSection;

    private void ShowCourseIntroduction(SelectableCourse selectableCourse)
    {
        _selectedCourse = selectableCourse;
        _loadingCourseIntroduction = string.IsNullOrEmpty(_selectedCourse.Introduction);
        _ = ZdbkService.UpdateIntroductionAsync(_selectedCourse).ContinueWith(_ =>
        {
            _loadingCourseIntroduction = false;
            InvokeAsync(StateHasChanged);
        });
        _introductionVisible = true;
    }

    protected RenderFragment<SelectableCourse> GetPanelHeader => course => __builder =>
    {
        <div>
            <GridRow>
                <GridCol Span="6">
                    <AntDesign.Text Strong>
                        @course.Id
                    </AntDesign.Text>
                </GridCol>
                <GridCol Span="6">
                    @course.Name
                </GridCol>
                <GridCol Span="4">
                    @course.Credits
                </GridCol>
                <GridCol Span="4">
                    <AntDesign.Tag Color="@GetStatusColor(course.Status)">
                        @GetStatusString(course.Status)
                    </AntDesign.Tag>
                </GridCol>
                <GridCol Span="4">
                    <Button Type="@ButtonType.Link"
                            OnClick="() => ShowCourseIntroduction(course)"
                            OnClickStopPropagation="true"
                            Size="ButtonSize.Small">
                        <Icon Type="info-circle" Theme="IconThemeType.Outline" /> 课程介绍
                    </Button>
                </GridCol>
            </GridRow>
        </div>

    };

    protected override async Task OnInitializedAsync()
    {
        await ZdbkService.GraduationRequirement.Peek().UpdateTask;
        Courses = ZdbkService.GraduationRequirement.Value;
    }


    private void HandlePageChange(PaginationEventArgs args)
    {
        _currentPage = args.Page;
        _pageSize = args.PageSize;
    }

    private void OnFilterChange(bool value)
    {
        _showOnlyUnfinished = value;
        _currentPage = 1; // 重置到第一页
    }
}
