@using chalaoshi.click
@using chalaoshi.click.Models
@using Quantum.UI.CourseSelectionAssistant.Services
@using zdbk.zju.edu.cn.Models
@inject IChalaoshiService ChalaoshiService
@inject IWishlistService WishlistService

<Table DataSource="@Sections"
       Size="TableSize.Small"
       Bordered>
    @if (ShowCourseName)
    {
        <PropertyColumn Title="课程名称" Property="c => c.Course.Name" />
    }
    <Column Title="教师" TData="SelectableSection">
        <div style="white-space: pre-wrap;">
            @string.Join('\n', context.Instructors)
        </div>
    </Column>
    <Column Title="教师评分" TData="SelectableSection">
        <div style="white-space: pre-wrap">
            @{
                foreach (var teacher in context.Instructors)
                {
                    if (_teacherCache.TryGetValue(new TeacherKey(teacher, context.Course.Department), out var cachedTeacher) && cachedTeacher is not null)
                    {
                        <a href="@GetTeacherUrl(cachedTeacher.Id)" target="_blank">@cachedTeacher.Rating</a>
                    }
                    @("\n")
                }
            }
        </div>
    </Column>
    <PropertyColumn Title="学期" Property="c => c.Semesters" />
    <Column Title="上课时间" TData="SelectableSection">
        <div style="white-space: pre-wrap;">
            @string.Join('\n', context.ScheduleAndLocations.Select(pair=>pair.Schedule))
        </div>
    </Column>
    <Column Title="上课地点" TData="SelectableSection">
        <div style="white-space: pre-wrap;">
        @string.Join('\n', context.ScheduleAndLocations.Select(pair=>pair.Location))
        </div>
    </Column>
    <PropertyColumn Title="考试时间" Property="c => c.ExamTime" />
    <PropertyColumn Title="教学形式" Property="c => c.TeachingForm" />
    <PropertyColumn Title="授课方式" Property="c => c.TeachingMethod" />
    <Column Title="余量/容量" TData="SelectableSection">
        @context.AvailableSeats/@context.Capacity
    </Column>
    <PropertyColumn Title="本专业待定人数" Property="c => c.MajorWaitingCount" />
    <PropertyColumn Title="所有待定人数" Property="c => c.TotalWaitingCount" />
    <Column Title="选中概率" TData="SelectableSection">
        @((int)(context.SelectionProbability * 100))%
    </Column>
    @if (ShowActions)
    {
        <ActionColumn>
            @{
                var sectionSnapshot = context.CreateSnapshot();
                @if (!WishlistService.Wishlist.Contains(sectionSnapshot))
                {
                    <AntDesign.Button Type="ButtonType.Primary" Size="ButtonSize.Small" @onclick="() => WishlistService.AddWish(sectionSnapshot)">加入心愿单</AntDesign.Button>
                }
                else
                {
                    <AntDesign.Button Type="ButtonType.Primary" Size="ButtonSize.Small" @onclick="() => WishlistService.RemoveWish(sectionSnapshot)">从心愿单中移除</AntDesign.Button>
                }
            }
        </ActionColumn>
    }
</Table>


@code
{
    [Parameter] public required List<SelectableSection> Sections { get; set; }
    [Parameter] public bool ShowActions { get; set; }
    [Parameter] public bool ShowCourseName { get; set; }

    private record TeacherKey(string Name, string Department);
    private readonly Dictionary<TeacherKey, Teacher?> _teacherCache = new();

    protected override void OnParametersSet()
    {
        var teacherTasks = Sections
            .SelectMany(s => s.Instructors.Select(name => new TeacherKey(name, s.Course.Department)))
            .Distinct()
            .Select(async key =>
            {
                var teacher = await ChalaoshiService.GetTeacherByNameAsync(key.Name, key.Department);
                _teacherCache[key] = teacher;
            });

        Task.WhenAll(teacherTasks).ContinueWith(async _ => await InvokeAsync(StateHasChanged));
    }

    private static string GetTeacherUrl(int teacherId) => $"https://chalaoshi.click/t/{teacherId}/";
}
