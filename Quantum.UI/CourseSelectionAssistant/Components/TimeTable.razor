@using zdbk.zju.edu.cn.Models
@using zdbk.zju.edu.cn.Constants
@using zdbk.zju.edu.cn.Utilities

<div class="timetable-container">
    <div class="timetable-header">
        <Tabs ActiveKey="@_currentSemester.ToString()" OnTabClick="OnSemesterChange">
            <TabPane Key="0" Tab="春季学期" />
            <TabPane Key="1" Tab="夏季学期" />
            <TabPane Key="2" Tab="秋季学期" />
            <TabPane Key="3" Tab="冬季学期" />
        </Tabs>
        <div class="week-toggle">
            <RadioGroup @bind-Value="@_currentWeekType" ButtonStyle="@RadioButtonStyle.Solid">
                <Radio Value="0">单周</Radio>
                <Radio Value="1">双周</Radio>
            </RadioGroup>
        </div>
    </div>

    <div class="timetable">
        <div class="time-column">
            <div class="time-slot"/>
            @foreach (var (time, index) in _timeSlots.Select((time, index) => (time, index)))
            {
                <div class="time-slot">
                    <div class="time-index">@(index + 1)</div>
                    <div class="time-range">@time</div>
                </div>
            }
        </div>
        <div class="weekday-grid">
            <div class="weekday-header">
                @foreach (var day in new[] { "一", "二", "三", "四", "五", "六", "日" })
                {
                    <div class="weekday">@day</div>
                }
            </div>
            <div class="course-grid">
                @for (var plot = 0; plot < 13; plot++)
                {
                    @for (var weekday = 0; weekday < 7; weekday++)
                    {
                        var course = _tableData[_currentSemester, weekday, _currentWeekType, plot];

                        if (course is not null)
                        {
                            // 检查是否是连续课程的起始位置
                            var isStart = plot == 0 || _tableData[_currentSemester, weekday, _currentWeekType, plot - 1] != course;
                        
                            if (isStart)
                            {
                                // 计算连续的课程节数
                                var span = 1;
                                while (plot + span < 13 && 
                                       _tableData[_currentSemester, weekday, _currentWeekType, plot + span] == course)
                                {
                                    span++;
                                }

                                <div class="course-cell" style="grid-row: @(plot + 1) / span @(span); grid-column: @(weekday + 1);">
                                    <div class="course-name">@course.Section.CourseName</div>
                                    <div class="course-info">
                                        <pre>@(string.Join('\n', course.Section.Instructors))</pre>
                                        <pre>@(string.Join('\n', course.Location))</pre>
                                    </div>
                                </div>
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>

<style>
    .timetable-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        height: 100%;
        overflow: hidden;
    }

    .timetable-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 1rem;
    }

    .timetable {
        display: flex;
        flex: 1;
        overflow: hidden;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .time-column {
        width: 80px;
        border-right: 1px solid #f0f0f0;
        background: #fafafa;
    }

    .time-slot {
        height: 50px;
        padding: 4px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        border-bottom: 1px solid #f0f0f0;
    }

    .time-index {
        font-size: 16px;
        font-weight: bold;
        color: #1890ff;
    }

    .time-range {
        font-size: 12px;
        color: #666;
    }

    .weekday-grid {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .weekday-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        background: #fafafa;
        border-bottom: 1px solid #f0f0f0;
    }

    .weekday {
        padding: 8px;
        text-align: center;
        font-weight: 500;
    }

    .course-grid {
        flex: 1;
        display: grid;
        grid-template-rows: repeat(13, 50px);
        grid-template-columns: repeat(7, 1fr);
        gap: 3px;
        overflow: auto;
        padding: 3px;
    }

    .course-cell {
        background: #e6f7ff;
        padding: 8px;
        font-size: 12px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        border-radius: 4px;
        border: 1px solid #91d5ff;
    }

    .course-name {
        font-weight: 600;
        text-align: center;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-bottom: 4px;
        font-size: 13px;
    }

    .course-info {
        color: #666;
        font-size: 11px;
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 4px;
    }

    .course-info pre {
        margin: 0;
        text-align: center;
        font-family: inherit;
        white-space: pre-line;
    }

    .course-cell:hover {
        border-color: #1890ff;
        box-shadow: 0 0 0 2px rgba(24,144,255,0.1);
    }

    /* 自定义滚动条 */
    .course-grid::-webkit-scrollbar {
        width: 6px;
        height: 6px;
    }

    .course-grid::-webkit-scrollbar-thumb {
        background: #0001;
        border-radius: 3px;
    }

    .course-grid::-webkit-scrollbar-track {
        background: transparent;
    }
</style>

@code {
    [Parameter]
    public HashSet<SectionSnapshot> Sections { get; set; } = [];

    private record CourseSectionInfo
    {
        public SectionSnapshot Section { get; set; } = null!;
        public string Location { get; set; } = string.Empty;
    }

    private readonly CourseSectionInfo?[,,,] _tableData = new CourseSectionInfo[4,7,2,13]; // semester, weekday, weekType, plot
    private int _currentSemester;
    private int _currentWeekType;
    private readonly string[] _timeSlots =
    [
        "8:00-8:45", "8:50-9:35",
        "10:00-10:45", "10:50-11:35",
        "11:40-12:25", "13:25-14:10",
        "14:15-15:00", "15:05-15:50",
        "16:15-17:00", "17:05-17:50",
        "18:50-19:35", "19:40-20:25",
        "20:30-21:15"
    ];

    protected override void OnParametersSet()
    {
        // 清空数据
        Array.Clear(_tableData, 0, _tableData.Length);

        // 填充数据
        foreach (var section in Sections)
        {
            foreach (var (plotFlag,location) in section.GetPlotFlagAndLocations())
            {
                var (semester, weekday, weekType, plots) = PlotFlag.ParsePlotFlag(plotFlag);
                for (var plot = 0; plot < 13; plot++)
                {
                    if ((plots & (1 << plot)) == 0) continue;

                    _tableData[semester, weekday, weekType, plot] = new CourseSectionInfo
                    {
                        Section = section,
                        Location = location
                    };
                }
            }
        }
    }

    private void OnSemesterChange(string key)
    {
        if (int.TryParse(key, out var semester))
        {
            _currentSemester = semester;
        }
    }
}
