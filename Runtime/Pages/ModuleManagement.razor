@page "/modules"
@using ElectronNET.API
@using ElectronNET.API.Entities
@using Quantum.Sdk
@using System.Globalization
@using System.IO.Compression
@inject IQuantum Quantum
@inject IEnumerable<IModule> Modules
@inject IMessageService MessageService

<Button Type="@ButtonType.Primary" OnClick="InstallModule">
    <Icon Type="upload" Theme="IconThemeType.Outline"></Icon>
    安装插件
</Button>
<Table TItem="IModule"
DataSource="@Modules"
HidePagination>
    <PropertyColumn Property="c=>c.ModuleId" Title="插件ID" />
    <PropertyColumn Property="c=>c.Version" Title="版本" />
    <PropertyColumn Property="c=>c.Author" Title="作者" />
    <Column Title="状态" TData="IModule">
        <Badge Status="@BadgeStatus.Processing" Text="已加载" />
    </Column>
    <Column Title="描述" TData="IModule">
        <Text>@context.Description</Text>
    </Column>
    <ActionColumn>
        <Button Type="@ButtonType.Primary" Danger OnClick="@(() => UninstallModule(context))">卸载</Button>
    </ActionColumn>
</Table>

<style>
    .module-list {
    margin-top: 20px;
    }
    .module-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    }
    .module-item span {
    margin-right: 10px;
    }
</style>

@code {

    private const string UninstallMarkFile = "TobeUninstalled.Quantum.MarkTag";

    private async Task InstallModule()
    {
        try
        {
            var mainWindow = Quantum.Window;
            if(Quantum.Window is null){ return; }
            var options = new OpenDialogOptions
            {
                Properties =
                [
                    OpenDialogProperty.openFile
                ],
                Filters =
                [
                    new FileFilter { Name = "ZIP Files", Extensions = ["zip"] }
                ]
            };

            var result = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);
            if (result.Length == 0)
                return;

            var zipPath = result[0];
            var tempPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
            Directory.CreateDirectory(tempPath);

            try
            {
                // 解压到临时目录
                ZipFile.ExtractToDirectory(zipPath, tempPath, true);

                // 检查是否只有一个顶层文件夹
                var topLevelItems = Directory.GetFileSystemEntries(tempPath);
                if (topLevelItems.Length != 1 || !Directory.Exists(topLevelItems[0]))
                {
                    await MessageService.Error("无效的插件包：压缩包必须只包含一个顶层文件夹");
                    return;
                }

                var moduleFolder = topLevelItems[0];
                var moduleName = Path.GetFileName(moduleFolder);
                var pendingPath = Path.Combine(Directory.GetCurrentDirectory(), "PendingModule", moduleName);

                // 确保PendingModule目录存在
                Directory.CreateDirectory(Path.GetDirectoryName(pendingPath)
                    ?? throw new InvalidOperationException($"无法获取目录名称: {pendingPath}"));

                if (Directory.Exists(pendingPath))
                    Directory.Delete(pendingPath, true);

                // 使用复制代替移动，因为可能跨卷
                CopyDirectory(moduleFolder, pendingPath, true);
                Directory.Delete(moduleFolder, true);

                await MessageService.Success(
                    "插件安装成功，请重启应用以加载新安装的插件"
                );
            }
            finally
            {
                // 清理临时目录
                if (Directory.Exists(tempPath))
                    Directory.Delete(tempPath, true);
            }
        }
        catch (Exception ex)
        {
            await MessageService.Error($"安装失败:{ex.Message}");
        }
    }

    private async Task UninstallModule(IModule module)
    {
        try
        {
            var modulePath = Path.GetDirectoryName(module.GetType().Assembly.Location) ?? throw new InvalidOperationException($"无法获取 {module.ModuleId} 所在的目录");

            await File.WriteAllTextAsync(Path.Combine(modulePath, UninstallMarkFile), DateTime.Now.ToString(CultureInfo.InvariantCulture));
            await MessageService.Success("模块将在下次启动时被移除");
        }
        catch (Exception ex)
        {
            await MessageService.Error($"卸载失败: {ex.Message}");
        }
    }

    private static void CopyDirectory(string sourceDir, string targetDir, bool overwrite)
    {
        Directory.CreateDirectory(targetDir);

        foreach (var file in Directory.GetFiles(sourceDir, "*", SearchOption.AllDirectories))
        {
            var relativePath = Path.GetRelativePath(sourceDir, file);
            var targetPath = Path.Combine(targetDir, relativePath);
            Directory.CreateDirectory(Path.GetDirectoryName(targetPath)
                                      ?? throw new InvalidOperationException($"无法获取目录名称: {targetPath}"));
            File.Copy(file, targetPath, overwrite);
        }
    }
}
