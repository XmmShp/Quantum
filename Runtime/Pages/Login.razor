@page "/modules/login"
@using Quantum.Runtime.Models
@using Quantum.Runtime.Services
@using Quantum.Sdk.Abstractions
@using Quantum.Sdk.Services
@inherits LoginPageBase
@inject ExtensionMarketService ExtensionMarketService
@inject MessageService MessageService

<div class="login-container">
    <div class="login-card">
        <h2 class="login-title">插件市场账号</h2>

        @if (ExtensionMarketService.IsAuthenticated)
        {
            <div class="user-info">
                <h3>当前登录用户</h3>
                <p><strong>用户名:</strong> @ExtensionMarketService.Data.CurrentUser?.Username</p>
                <p><strong>邮箱:</strong> @ExtensionMarketService.Data.CurrentUser?.Email</p>
                <div class="login-actions">
                    <Button Type="@ButtonType.Primary" OnClick="Logout">退出登录</Button>
                </div>
            </div>
        }
        else
        {
            <Tabs ActiveKey="@_activeTabKey" OnTabClick="HandleTabClick">
                <TabPane Key="login" Tab="登录">
                    <Form Model="@_loginModel" Layout="@FormLayout.Vertical">
                        <FormItem Label="邮箱">
                            <Input @bind-Value="@_loginModel.Email" Placeholder="请输入邮箱" />
                        </FormItem>
                        <FormItem Label="密码">
                            <InputPassword @bind-Value="@_loginModel.Password" Placeholder="请输入密码" />
                        </FormItem>
                        <FormItem>
                            <div class="login-actions">
                                <Button Type="@ButtonType.Primary" OnClick="LoginAsync">登录</Button>
                            </div>
                        </FormItem>
                    </Form>
                </TabPane>
                <TabPane Key="register" Tab="注册">
                    <Form Model="@_registerModel" Layout="@FormLayout.Vertical">
                        <FormItem Label="用户名">
                            <Input @bind-Value="@_registerModel.Username" Placeholder="请输入用户名" />
                        </FormItem>
                        <FormItem Label="邮箱">
                            <Input @bind-Value="@_registerModel.Email" Placeholder="请输入邮箱" />
                        </FormItem>
                        <FormItem Label="密码">
                            <InputPassword @bind-Value="@_registerModel.Password" Placeholder="请输入密码（至少6个字符）" />
                        </FormItem>
                        <FormItem>
                            <div class="login-actions">
                                <Button Type="@ButtonType.Primary" OnClick="Register">注册</Button>
                            </div>
                        </FormItem>
                    </Form>
                </TabPane>
            </Tabs>
        }
    </div>
</div>

<style>
    .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh;
    }

    .login-card {
    width: 400px;
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    background-color: white;
    }

    .login-title {
    text-align: center;
    margin-bottom: 24px;
    }

    .login-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 16px;
    }

    .user-info {
    padding: 16px 0;
    }
</style>

@code
{
    private string _activeTabKey = "login";
    private readonly UserLoginDto _loginModel = new();
    private UserRegistrationDto _registerModel = new();

    protected override IAccountService AccountService => ExtensionMarketService;

    private void HandleTabClick(string key)
    {
        _activeTabKey = key;
    }

    private async Task LoginAsync()
    {
        try
        {
            var result = await ExtensionMarketService.LoginAsync(_loginModel.Email, _loginModel.Password);
            if (result.IsSuccess)
            {
                await MessageService.Success("登录成功");
                NavigateToReturnUrl();
            }
            else
            {
                await MessageService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageService.Error($"登录出错: {ex.Message}");
        }
    }

    private async Task Register()
    {
        try
        {
            var result = await ExtensionMarketService.RegisterAsync(
                _registerModel.Username,
                _registerModel.Password,
                _registerModel.Email);

            if (result.IsSuccess)
            {
                _activeTabKey = "login";
                _loginModel.Email = _registerModel.Email;
                _registerModel = new UserRegistrationDto();
                await MessageService.Success("注册成功，请登录");
            }
            else
            {
                await MessageService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageService.Error($"注册出错: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await ExtensionMarketService.LogoutAsync();
        await MessageService.Success("已退出登录");
    }
}
