@page "/"
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json.Serialization
@using Quantum.Runtime.Components
@using Quantum.Sdk.Abstractions
@using Quantum.Sdk.Utilities
@inject NavigationManager NavigationManager
@inject IEnumerable<IInitializableService> InitializableServices

<div class="splash-page">
    <div class="title-bar-container">
        <TitleBar />
    </div>
    <div class="splash-container">
        <div class="splash-content">
            <div class="logo">
                <img src="/images/logo.png" alt="Quantum Logo" />
            </div>
            <div class="loading-section">
                <div class="progress-bar">
                    <div class="progress" style="width: @($"{_progress}%")"></div>
                </div>
                <div class="status-text">@_statusText</div>
            </div>
            @if (_hitokoto is not null)
            {
                <div class="hitokoto-section">
                    <div class="hitokoto-content">@_hitokoto.Content</div>
                    <div class="hitokoto-from">
                        —— @_hitokoto.From
                        @if (!string.IsNullOrWhiteSpace(_hitokoto.FromWho))
                        {
                            <span>「@_hitokoto.FromWho」</span>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Local")]
    private class HitokotoModel
    {
        [JsonPropertyName("hitokoto")]

        public required string Content { get; init; }

        [JsonPropertyName("from")]
        public required string From { get; init; }

        [JsonPropertyName("from_who")]
        public string? FromWho { get; init; }
    }

    private static bool _isFirstRender;
    private int _progress;
    private string _statusText = "正在初始化...";
    private HitokotoModel? _hitokoto;

    protected override async Task OnInitializedAsync()
    {
        if (!_isFirstRender)
        {
            _isFirstRender = true;
            return;
        }

        try
        {
            // 并行加载一言和初始化应用
            var initTask = InitializeApplicationAsync();
            _ = LoadHitokotoAsync();

            await initTask;
        }
        catch (Exception ex)
        {
            _statusText = $"初始化失败: {ex.Message}";
            return;
        }

        // 所有初始化完成后，导航到主页
        NavigationManager.NavigateTo("/home",true);
    }

    private async Task LoadHitokotoAsync()
    {
        try
        {
            using var client = RequestClient.Create();
            _hitokoto = await client.GetFromJsonAsync<HitokotoModel>("https://v1.hitokoto.cn/");
            StateHasChanged();
        }
        catch
        {
            // ignore
        }
    }

    private async Task InitializeApplicationAsync()
    {
        UpdateProgress("正在初始化服务...", 10);

        var services = InitializableServices.ToList();
        if (!services.Any())
        {
            UpdateProgress("服务初始化完成", 100);
            return;
        }

        var tasks = services.Select(s => s.InitializeTask).ToList();
        var completedCount = 0;
        var progressPerTask = 90.0 / tasks.Count; // 预留10%的起始进度

        while (tasks.Any())
        {
            var completedTask = await Task.WhenAny(tasks);
            tasks.Remove(completedTask);
            completedCount++;

            var progress = 10 + (int)(completedCount * progressPerTask);
            UpdateProgress($"正在初始化服务 ({completedCount}/{services.Count})...", progress);
        }

        UpdateProgress("服务初始化完成", 100);
    }

    private void UpdateProgress(string status, int progress)
    {
        _statusText = status;
        _progress = progress;
        StateHasChanged();
    }
}
