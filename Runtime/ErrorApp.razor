@using System.IO
@using Microsoft.Extensions.Logging
@inject IJSRuntime JsRuntime
@inject ILogger<ErrorApp> Logger
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>应用程序启动错误</title>
    <base href="/" />
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f5f5f5;
            color: #333;
        }

        .error-container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            max-width: 600px;
            text-align: center;
            margin: 0 auto;
        }

        h1 {
            color: #d32f2f;
            margin-bottom: 1rem;
        }

        .error-details {
            margin-top: 2rem;
            text-align: left;
            background-color: #f8f8f8;
            padding: 1rem;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9rem;
            overflow-x: auto;
            max-height: 200px;
            overflow-y: auto;
        }

        .action-button {
            background-color: #1976d2;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            margin-top: 1.5rem;
            margin-right: 0.5rem;
            transition: background-color 0.3s;
        }

        .action-button:hover {
            background-color: #1565c0;
        }

        .danger-button {
            background-color: #d32f2f;
        }

        .danger-button:hover {
            background-color: #b71c1c;
        }

        .status-message {
            margin-top: 1rem;
            padding: 0.75rem;
            border-radius: 4px;
            background-color: #e8f5e9;
            color: #2e7d32;
            display: none;
        }

        .status-message.visible {
            display: block;
        }
    </style>
</head>

<body>
    <div class="error-container">
        <h1>应用程序启动失败</h1>
        <p>很抱歉，应用程序在启动过程中遇到了问题。</p>
        <p>请尝试重新启动应用程序，如果问题仍然存在，请联系技术支持。微信号: XmmShp</p>

        <div class="error-details">
            <p><strong>错误信息:</strong> @ErrorMessage</p>
        </div>

        <div id="statusMessage" class="status-message @(ShowStatus ? "visible" : "")">
            @StatusMessage
        </div>
    </div>

    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code {
    [Parameter]
    public string ErrorMessage { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
    private bool ShowStatus { get; set; }

    protected override void OnInitialized()
    {
        // Get error message from query string if not provided
        if (!string.IsNullOrEmpty(ErrorMessage)) return;

        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        ErrorMessage = query["errorMessage"] ?? "未知错误";
    }

    private void ReloadPage()
    {
        JsRuntime.InvokeVoidAsync("window.location.reload");
    }

    private async Task ConfirmDisablePlugins()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "确定要禁用所有插件吗？这可能会解决启动问题，但会使所有插件功能不可用。");

        if (confirmed)
        {
            await DisableAllPlugins();
        }
    }

    private async Task DisableAllPlugins()
    {
        try
        {
            // Create the Disabled directory if it doesn't exist
            var disabledDir = Path.Combine(AppContext.BaseDirectory, "Disabled");
            Directory.CreateDirectory(disabledDir);

            // Get the Modules directory
            var modulesDir = Path.Combine(AppContext.BaseDirectory, "Modules");
            if (!Directory.Exists(modulesDir))
            {
                StatusMessage = "没有找到插件目录";
                ShowStatus = true;
                StateHasChanged();
                return;
            }

            // Move each module to the Disabled directory
            var moduleDirectories = Directory.GetDirectories(modulesDir);
            var disabledCount = 0;

            foreach (var moduleDir in moduleDirectories)
            {
                var moduleName = Path.GetFileName(moduleDir);
                var targetDir = Path.Combine(disabledDir, moduleName);

                // If the target directory already exists, delete it first
                if (Directory.Exists(targetDir))
                {
                    Directory.Delete(targetDir, true);
                }

                // Move the module directory to the Disabled directory
                Directory.Move(moduleDir, targetDir);
                disabledCount++;

                Logger.LogInformation("Disabled module: {ModuleName}", moduleName);
            }

            StatusMessage = $"成功禁用了 {disabledCount} 个插件。应用程序将在3秒后重新加载...";
            ShowStatus = true;
            StateHasChanged();

            // Reload after 3 seconds
            await Task.Delay(3000);
            await JsRuntime.InvokeVoidAsync("window.location.reload");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to disable plugins");
            StatusMessage = $"禁用插件时发生错误: {ex.Message}";
            ShowStatus = true;
            StateHasChanged();
        }
    }
}
