@using Quantum.Sdk
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IQuantum Quantum

<div class="title-bar">
    <div class="drag-area">
        <Icon Type="thunderbolt" Theme="IconThemeType.Fill" Class="app-icon" />
        <span class="app-title">Quantum</span>
    </div>
    <div class="window-controls">
        <Button Type="@ButtonType.Link"
        Icon="clear"
        OnClick="ClearAllCache"
        Style="color: rgba(255,255,255,0.65)">
            清除缓存
        </Button>
        <button class="control-button" @onclick="MinimizeWindow">
            <Icon Type="minus" Theme="IconThemeType.Outline"/>
        </button>
        <button class="control-button" @onclick="MaximizeWindow">
            <Icon Type="border" Theme="IconThemeType.Outline"/>
        </button>
        <button class="control-button close" @onclick="CloseWindow">
            <Icon Type="close" Theme="IconThemeType.Outline"/>
        </button>        
    </div>
</div>

<style>
    .title-bar {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    -webkit-app-region: drag;
    user-select: none;
    width: 100%;
    }

    .drag-area {
    flex: 1;
    display: flex;
    align-items: center;
    padding: 0 12px;
    height: 100%;
    }

    .app-icon {
    font-size: 18px;
    color: #1890ff;
    }

    .app-title {
    color: #fff;
    font-size: 12px;
    opacity: 0.65;
    }

    .window-controls {
    display: flex;
    height: 100%;
    -webkit-app-region: no-drag;
    }

    .control-button {
    width: 45px;
    height: 100%;
    border: none;
    background: transparent;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
    opacity: 0.45;
    }

    .control-button:hover {
    background: rgba(255,255,255,0.1);
    opacity: 0.85;
    }

    .control-button.close:hover {
    background: #e81123;
    opacity: 1;
    }

    :global(.control-button .anticon) {
    font-size: 10px;
    }

    :global(.title-bar .ant-btn-link) {
    height: 32px;
    padding: 4px 8px;
    }

    :global(.title-bar .ant-btn-link:hover) {
    color: white !important;
    background: rgba(255,255,255,0.1);
    }
</style>

@code {
    private void MinimizeWindow()
    {
        Quantum.Window?.Minimize();
    }

    private async Task MaximizeWindow()
    {
        var window = Quantum.Window;
        if(window is null){ return; }
        if (await window.IsMaximizedAsync())
        {
            window.Unmaximize();
        }
        else
        {
            window.Maximize();
        }
    }

    private void CloseWindow()
    {
        Quantum.Window?.Close();
    }

    private async Task ClearAllCache()
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "确定要清除所有缓存吗？这将会清除所有本地数据并刷新页面。");
        if (!confirmed) return;

        try
        {
            // 清除浏览器缓存
            await Js.InvokeVoidAsync("eval", @"
                // 清除 localStorage
                localStorage.clear();
                // 清除 sessionStorage
                sessionStorage.clear();
                // 清除 cookies
                document.cookie.split(';').forEach(function(c) {
                    document.cookie = c.trim().split('=')[0] + '=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
                });
                // 清除 Cache Storage
                if (window.caches) {
                    caches.keys().then(function(names) {
                        names.forEach(function(name) {
                            caches.delete(name);
                        });
                    });
                }                
            ");

            // 清除 data 目录
            var dataPath = Path.Combine(AppContext.BaseDirectory, "data");
            if (Directory.Exists(dataPath))
            {
                Directory.Delete(dataPath, true);
            }
        }
        catch (Exception ex)
        {
            await Js.InvokeVoidAsync("alert", $"清除缓存时发生错误：{ex.Message}");
        }
    }
}
